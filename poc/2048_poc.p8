pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
--main
function _init()
 setup()
end

function _update()
 dobutton()
end

function _draw()
cls()
map()
--printfield()
draw_squares()
end
-->8
--setup
function setup()
 field={}
 for i=1,4 do
 	field[i]={}
 	for j=1,4 do
 		field[i][j]=0
 	end
 end
 --start w/ 2 squares
 addnewrfpoint()
 addnewrfpoint()
end
-->8
--field utils
function rfpoint()
 return flr(rnd(4))+1
end

function emptycount(_field)
	local zcnt=0
 for i=1,4 do
 	for j=1,4 do
 		if (field[i][j]==0) zcnt+=1
 	end
 end
 return zcnt
end

--returns x,y,isfound
function findemptypoint()
 local p=0
 local cnt=0
 for i=1,4 do
 	for j=1,4 do
	  p=fields[i][j]
	  if p==0 then 
	   return i,j,true
	  else
	   cnt+=1
	   if cnt>=16 then
	    return -1,-1,false
	   end
	  end
 	end
 end	
end

function getropenfpoint()
 if emptycount()==0 then
  return -1,-1,false
 end
 local _x,_y
 while true do
  _x=rfpoint()
  _y=rfpoint()
  if field[_x][_y]==0 then
   return _x,_y,true
  end
 end 
end

function addnewrfpoint()
	local _x,_y,_z=getropenfpoint()
	if not _z then
	 return -1,-1,false
	end
	field[_x][_y]=2
	return _x,_y,true
end

--
--move-related functions
--
function combine_vals(_vals)
 printh("checking "..prncomb(_vals))
	assert(#_vals<=4,"too many values")
 --all zero?
 local allz=true
 for z=1,4 do
  if _vals[z]!=0 then
   allz=false
   break
  end
 end
 if (allz) return _vals
 --combine 4 values down per game rules  
 local chkagn=false
 local nxtif=true --continue next if
 repeat
  ischkagn=false
  nxtif=true 
  for i=1,3 do
	  if nxtif and _vals[i]==_vals[i+1] then
	   _vals[i]+=_vals[i+1]
	   deli(_vals,i+1)
	   add(_vals,0)
	   ischkagn=true
	   nxtif=false
	  elseif _vals[i]==0 then
	   deli(_vals,i)
	   add(_vals,0)
	   ischkagn=true
	   nxtif=true
	  end  
  end
 until ischkagn
 return _vals
end

function doup_move()
 for _x=1,4 do
  local combme={}
 	for _y=1,4 do
   add(combme,field[_x][_y])
   if _y==4 then
    local nv=combine_vals(combme)
    printh(_x..",".._y..","..#nv)
    for _yy=1,4 do
     field[_x][_yy]=nv[_yy]
    end
   end
 	end
 end 
end

function dodown_move()

end

function doleft_move() --the "easy" one?
 --yo this is wrong!!
 --this is up move
 for _x=1,4 do
  local combme={}
 	for _y=1,4 do
   add(combme,field[_x][_y])
   if _y==4 then
    local nv=combine_vals(combme)
    printh(_x..",".._y..","..#nv)
    for _yy=1,4 do
     field[_x][_yy]=nv[_yy]
    end
   end
 	end
 end 
end

function doright_move()

end

-->8
--draw

function draw_square(_x,_y)
 local relx=(_x-1)*32
 local rely=(_y-1)*32
 local val=field[_x][_y]
 if val>0 then
  --rectfill(relx,rely,relx+32,rely+23,11)
  color(11)
  rect(relx,rely,relx,rely)
  local len=#tostr(val)
  local off=14-flr(len/2)
  --if (#tostr(val) == 3) off+=1
  --if (#tostr(val) == 4) off-=3
 	print(val,relx+off-len,rely+13)
 end
end

function draw_squares()
 for i=1,4 do
 	for j=1,4 do
			draw_square(i,j)
 	end
 end

end
-->8
--update

function dobutton()
 if btnp(⬅️) then
  printh("⬅️")
  doleft_move()
 elseif btnp(➡️) then
 
 elseif btnp(⬆️) then
 
 elseif btnp(⬇️) then
 
 elseif btnp(❎) then
 
 elseif btnp(🅾️) then
 
 end
end
-->8
--debug

function printfield()
 for i=1,4 do
 	for j=1,4 do
 	 local p=i..","..j..":"..field[i][j]
   print(p,3)
 	end
 end
end

function prncomb(_v)
 local out=""
 for i=1,4 do
  out=out..tostr(_v[i])..";"
 end
 return out
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000006600000000000000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000006600000000000000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000006600000000000000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000006600000000000000000000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
60606060060606066060606000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
60606060060606066060606000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000006600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
2100002022000020220000202200002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100001012000010120000101200001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1400001300000013000000130000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1400001012000010120000101200001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2100001300000013000000130000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100001012000010120000101200001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1400001300000013000000130000001300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1100001012000010120000101200001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
